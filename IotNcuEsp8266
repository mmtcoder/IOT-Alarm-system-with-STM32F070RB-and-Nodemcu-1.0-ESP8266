

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include "ets_sys.h"
#include "esp8266_peri.h"


// Update these with values suitable for your network.

 char* ssid = "";
 char* password =  "";
 char* mqttServer = "";

//Transmit to STM32
 char ALARM_ACTIVATE_CODE [] = {'2','0'};
 char ALARM_DEACTIVATE_CODE [] = {'2','1'};
 char MSG_SENT_TO_CLT [] = {'3','0'};
 char NOMSG_SENT_TO_CLT [] = {'3','1'};

//Receiving from STM32
 char ALARM_ACTIVATED_CODE [] ={'2','3'};
 char ALARM_DEACTIVATED_CODE [] ={'2','4'};
 char SYSTEM_ALARMED_CODE [] = {'2','5'};

 char CLIENT_TOPIC1 [] = ""; //Define your own topic Exmp : alarm/one

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];

char bufferStm[2];
char indx =0;


void setup() {
  
//  pinMode(BUILTIN_LED, OUTPUT);      This code is not necessary
  Serial.begin(9600);
  
  
  
  setup_wifi();
  client.setServer(mqttServer, 1883);
  client.setCallback(callback);

  snprintf (msg, 50, "hello world #");
   // Serial.print("Publish message: ");
   // Serial.println(msg);
    client.publish(CLIENT_TOPIC1, msg);
}

void loop() {
   
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  receiveDataFromSTM32();
  
}

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  //Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  //  Serial.print(".");
  }

  randomSeed(micros());

  //Serial.println("");
  //Serial.println("WiFi connected");
 // Serial.println("IP address: ");
 // Serial.println(WiFi.localIP());


}

void callback(char* topic, byte* payload, unsigned int length) {
  
 char buf [2];
  for (int i = 0; i < 2; i++) {
    buf[i] = (char)payload[i];
  }
  
 transmitToSTM32(buf);

/*
  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1' ) {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }
*/
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
     // Serial.println("\nconnected");
      // Once connected, publish an announcement...
      client.publish(CLIENT_TOPIC1, "hello world");
      // ... and resubscribe
      client.subscribe(CLIENT_TOPIC1);
    } else {
      transmitToSTM32(NOMSG_SENT_TO_CLT);
      
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void receiveDataFromSTM32()
{
  
  if (Serial.available() > 0)
  {
    
      char c = (char)Serial.read();
      if(indx < sizeof bufferStm)
  {
    bufferStm[indx++] = c;
    if(indx == 2)
    {
       if( bufferStm[0] == ALARM_ACTIVATED_CODE[0] && bufferStm[1] == ALARM_ACTIVATED_CODE[1])
      {
        sendMessageToClient(CLIENT_TOPIC1,ALARM_ACTIVATED_CODE);
       }
      else if(bufferStm[0] == SYSTEM_ALARMED_CODE[0] && bufferStm[1] == SYSTEM_ALARMED_CODE[1])
      {
        sendMessageToClient(CLIENT_TOPIC1,SYSTEM_ALARMED_CODE);
      }
       else if(bufferStm[0] == ALARM_DEACTIVATED_CODE[0] && bufferStm[1] == ALARM_DEACTIVATED_CODE[1])
      {
        sendMessageToClient(CLIENT_TOPIC1,ALARM_DEACTIVATED_CODE);
      }
      indx =0;
    }
  }
  
  }      
}
/*
 * Brief : This function send message to client. 
 * Param "topic" : topic of the mqtt message
 * Param "mssg" : message that you will sending to client
 */
void sendMessageToClient(char topic [], char mssg [])
{
  if(client.connected())
  {
    if(mssg[0] == ALARM_ACTIVATED_CODE[0] && mssg[1] == ALARM_ACTIVATED_CODE[1])
    {
      client.publish(topic, "23");
      transmitToSTM32(MSG_SENT_TO_CLT);
    }
    else if(mssg[0] == SYSTEM_ALARMED_CODE[0] && mssg[1] == SYSTEM_ALARMED_CODE[1])
    {
      client.publish(topic, "25");
    }
    else if(mssg[0] == ALARM_DEACTIVATED_CODE[0] && mssg[1] == ALARM_DEACTIVATED_CODE[1])
    {
      client.publish(topic, "24");
      transmitToSTM32(ALARM_DEACTIVATED_CODE);
    }
  }
  else
  {
    transmitToSTM32(NOMSG_SENT_TO_CLT);
  }
 }

void transmitToSTM32(char msg [])
{
  Serial.print(msg);
}
